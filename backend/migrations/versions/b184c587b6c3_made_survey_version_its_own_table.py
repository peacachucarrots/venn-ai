"""made survey version its own table

Revision ID: b184c587b6c3
Revises: af32414d02aa
Create Date: 2025-07-30 04:55:26.280224

"""
from alembic import op
import sqlalchemy as sa
import uuid

# revision identifiers, used by Alembic.
revision = 'b184c587b6c3'
down_revision = 'af32414d02aa'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('survey_versions',
    sa.Column('survey_version_id', sa.UUID(), primary_key=True),
    sa.Column('survey_id', sa.UUID(), nullable=False),
    sa.Column('revision', sa.Integer(), nullable=False),
    sa.Column('imported_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('schema_hash', sa.String(length=64)),
    sa.Column("is_active", sa.Boolean(), nullable=False, server_default=sa.text("true")),
    sa.ForeignKeyConstraint(['survey_id'], ['surveys.survey_id'], ondelete='CASCADE'),
    sa.UniqueConstraint('survey_id', 'revision', name="uq_survey_versions_revision_per_survey"))

    with op.batch_alter_table('questions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('survey_version_id', sa.UUID(), nullable=True))

    conn = op.get_bind()
    versions = []
    for survey_id, in conn.execute(sa.text("SELECT survey_id FROM surveys")):
        version_id = uuid.uuid4()
        versions.append(
            {
                "survey_version_id": version_id,
                "survey_id": survey_id,
                "revision": 1,
                "is_active": True,
            }
        )
        conn.execute(
            sa.text(
                """
                UPDATE questions
                SET survey_version_id = :vid
                WHERE survey_id = :sid
                """
            ),
            {"vid": version_id, "sid": survey_id},
        )

    op.bulk_insert(sa.table(
        "survey_versions",
        sa.column("survey_version_id", sa.UUID()),
        sa.column("survey_id", sa.UUID()),
        sa.column("revision", sa.Integer()),
        sa.column("is_active", sa.Boolean()),
    ), versions)

    with op.batch_alter_table('questions', schema=None) as batch_op:
        batch_op.alter_column("survey_version_id", nullable=False)
        batch_op.create_foreign_key(
            "fk_questions_survey_version",
            "survey_versions",
            ["survey_version_id"],
            ["survey_version_id"],
            ondelete="CASCADE",
        )

    with op.batch_alter_table('surveys', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_survey_active_per_slug'))
        batch_op.drop_constraint(batch_op.f('surveys_typeform_id_revision_key'), type_='unique')
        batch_op.drop_column('schema_hash')
        batch_op.drop_column('is_active')
        batch_op.drop_column('revision')

    with op.batch_alter_table('survey_versions', schema=None) as batch_op:
        batch_op.create_index(
            "ix_survey_active_per_slug",
            ["survey_id"],
            unique=True,
            postgresql_where=sa.text("is_active"),
        )

    # ### end Alembic commands ###


def downgrade():
    with op.batch_alter_table("surveys") as batch_op:
        batch_op.add_column(sa.Column("revision", sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column("is_active", sa.Boolean()))
        batch_op.add_column(sa.Column("schema_hash", sa.String(length=64)))
        batch_op.create_unique_constraint(
            "surveys_typeform_id_revision_key",
            ["typeform_id", "revision"],
        )
        batch_op.create_index(
            "ix_survey_active_per_slug",
            ["typeform_id"],
            unique=True,
            postgresql_where=sa.text("is_active"),
        )

    with op.batch_alter_table("questions") as batch_op:
        batch_op.drop_constraint("fk_questions_survey_version", type_="foreignkey")
        batch_op.drop_column("survey_version_id")

    with op.batch_alter_table("survey_versions") as batch_op:
        batch_op.drop_index("ix_survey_active_per_slug")
        batch_op.drop_constraint(
            "uq_survey_versions_revision_per_survey", type_="unique"
        )

    op.drop_table("survey_versions")
    # ### end Alembic commands ###
